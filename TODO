IDEAS
=====

- 'immutable' builder

- some kind of obfuscator to reduce codebase size ?

- some kind of compiler to skip class construction stage (for immutable classes)?



TASKS
=====

- add exception for inheritance from nothing ( isa : null )

- derive 'stable' branch

- Ext.applyIf analog?

- check overridableness of method and attribute metaclasses

- add benchmarking capabilities to Test.Run

- add SKIP and TODO methods to Test.Run
- add warnings about SUPER on proto level in OPERA


- fix OpenJSAN.org html extraction method
- fix JSAN shell 'install' command

- release Module::Build::Functions (CSJ)
- release Module::JSAN


DOCS
====

- Joose.Cookbook
- Joose.Manual 
   - Installation 
    -- for Mac OS
    -- verify that procedure works several platforms (CPAN Testers at least) especially on Windows  



AFTER HAVING A BENCHMARK SUITE
==============================

- convert all OVERRIDE modifiers in core to AROUND? (need to benchmark them 1st)
- implement optimization for methods/OVERRIDE modifiers w/o SUPER calls ) probably should be configurable, to avoid increasing of startup overhead 
- statically:

     methods : {
        function () {
            //no SUPER inside
        }.raw() /* by helper script */
     }



REFACTORING POSSIBILITIES
=========================

- merge advanced attribute Role into bootstrap role

- merge bootstrap role into managed class?


- if (this.hasAttribute('builderClass')) this.getBuiderTarget() - to create a separate builder class for each metaclass
- + stem
- needs a test


- move builderClass and stemClass to private attributes (with leading underscore)?

 -or-

- merge 'builder' into class itself?

- metaclass as subclass of stem?







EXTENSIONS
==========

- JooseX.Class.Singleton; http://gist.github.com/243923

- JooseX.Builder.Also (to address Rhino issues and allow multiple modifiers in the same class)

- JooseX.Meta.Parameterized (aka parameterized roles, + classes)

- JooseX.Type

- JooseX.Meta.Configurable (allows builders which will configure the meta + aliases for them)

- JooseX.Attribute:
 - delegation
 - predicating/clearing
 - typing, coercion
 - traits for attributes

- JooseX.Method.Overloaded

DONE
====

- release JSAN::Shell
- rewrite 'my' Singleton as Class methods (and create a separate Singleton core metaclass or JooseX)
- refactor advanced attributes from roles to adding methods directly (should be well test-covered first)
- refactor methods & modifiers to reduce overhead
- migrate AUGMENT modifier to closures
- anonymous classes
- refactor helpers
- fix multiple failures under FF3.5
- does for superclasses
- migrate to github
- add override check for PUT modifiers
- fix namespace managers executeIn to omit the args?
- refactor addRole (add something like 'beforeAdd' hook, which is very often needs to be overridden)
- global 'traits' config? to apply traits immediatly after instance creation?
- Class as Role? spec&implemented or remove
- subclass builder and stem classes on-demand only
- BUILD method to prepare the arguments passed to constructor
- refactor Joose.Helper to a global "instantiator" of classes. Then it will be possible to apply roles to it, to globally modify the class creation process
- merge Containable to Mutable
- cleanClone of Stem move to Composition
- fix frames double loading in Opera (Test.Run)
