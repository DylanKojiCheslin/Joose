// Librarian

var path        = require('path')
var fs          = require('fs')
var temp        = require('temp')

var Joose       = require('../../../joose-all')

var File        = require('./File')
var Template    = require('./Template')



module.exports = Joose.Class({
    
    does    : require('./ModuleResolver')(Joose),
    
    has     : {
        coreModules     : {
            init        : {
                'fs'    : true,
                'path'  : true,
                'event' : true
            }
        },
        
        root            : { required : true },
        
        files           : Joose.I.Object,
        
        includeJooseCompat  : false,
        
        tempRoot        : {
            
            lazy : function () {
            
            }
        },
        
        template        : {
            is          : 'rwc',
            lazy        : function () { return new Template(fs.readFileSync(require.resolve('../util/module_wrapper.js'), 'utf8')) }
        }
    },
    
    
    override : {
        
        resolve : function (require, baseDir) {
            if (baseDir instanceof File) baseDir = path.dirname(baseDir.name)
            
            var resolvedTo = this.SUPER(require, baseDir)
            
            if (!resolvedTo) throw new Error("Failed to resolve [" + require + "] in the directory [" + path.join(this.root, baseDir) + "]")
            
            return resolvedTo
        }
    },
    
    
    methods : {
        
        initialize : function () {
            this.root       = path.resolve(this.root)
        },
        
        
        getFileAsJSON : function (fileName) {
            return JSON.parse(this.getContentOf(fileName))
        },
        
        
        getContentOf : function (fileName) {
            //console.log('GET CONTENT OF %s', fileName)
            
            return fs.readFileSync(path.join(this.root, fileName), 'utf8')
        },
        
        
        getCoreModule : function (coreModule) {
            throw new Error('not supported yet')
        },
        
        
        fileExists : function (fileName) {
            //console.log('CHECKING FILE %s', fileName)
            
            try {
                var stat    = fs.statSync(path.join(this.root, fileName))
                
                return stat.isFile()
                
            } catch (e) {
                //console.log('FILE NOT EXIST %s', fileName)
                
                return false
            }
        },
        
        
        getFile : function (fileName) {
            var files   = this.files
            
            if (files[ fileName ]) return fileName
        
            return files[ fileName ] = new File({
                name        : fileName,
                librarian   : this
            })
        },
        
        
        wrap : function (file) {
            
            return this.template().render({
                content     : this.getContentOf(file.name),
                
                includeJooseCompat  : this.includeJooseCompat,   
                
                fileName    : file.name,
                dirName     : path.dirname(file.name)
            })
        },
        
        
        writeBundleTo : function (stream, requires) {
            var me      = this
            
            //console.log('requires %s', requires)
            
            var files   = Joose.A.map(requires, function (require) {
                return me.getFile(me.resolve(require, '.'))
            })
            
            var allFiles    = {}
            
            Joose.A.each(files, function (file) {
                
                Joose.O.each(file.getInDepthDependencies(), function (file, name) {
                    if (allFiles[ name ] && allFiles[ name ] != file) throw new Error('Inconsistency')
                    
                    allFiles[ name ] = file
                })
            })
            
            Joose.O.each(allFiles, function (file) {
                stream.write(me.wrap(file) + ';\n')
            })
        }
    }
})