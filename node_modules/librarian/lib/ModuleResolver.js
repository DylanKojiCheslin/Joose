// ModuleResolver - logic for resolving modules in node, w/o deps

module.exports = function (Joose) {
    
    return Joose.Role({
        
        requires    : [ 'fileExists', 'getFile', 'getFileAsJSON', 'getCoreModule' ],
        
        has : {
            coreModules         : Joose.I.Object
        },
        
        
        methods : {
            
            cleanupPath : function (path) {
                path            = path.replace(/\/+/g, '/')
                
                // XXX todo proper parent dir filter (right now breaks for folder names with dots)
                var currentDir  = /(^|\/)\.\//
                var parentDir   = /[^/.]+\/\.\.\//
                
                while (currentDir.test(path))   path = path.replace(currentDir, '$1')
                while (parentDir.test(path))    path = path.replace(parentDir, '')
                
                return path
            },
            
            
            resolveAsDir : function (requireStr) {
                // strip trailing slash
                requireStr     = requireStr.replace(/\/+$/, '')
                
                if (this.fileExists[ fileName + '/package.json']) {
                    var packageJSON = this.getFileAsJSON(fileName + '/package.json')
                    
                    var main        = packageJSON.main
                    
                    // if `main` key presents - rootResolve it as file
                    if (main)       return this.resolveAsFile(requireStr + '/' + main)
                }
                
                // and finally try to load "index"
                return this.resolveAsFile(requireStr + '/index')
            },
            
            
            resolveAsFile : function (requireStr) {
                requireStr      = this.cleanupPath(requireStr)
                
                if (this.fileExists(requireStr)) return this.getFile(requireStr)
                
                if (this.fileExists(requireStr + '.js')) return this.getFile(requireStr + '.js')
                
                return null
            },
            
            
            resolveAsModule : function (requireStr, baseDir) {
                baseDir         = baseDir.replace(/\/+$/, '')
                
                var parts       = baseDir.split(/\//)
                var dirs        = []
                
                while (parts.length) {
                    var segment     = parts.pop()
                    
                    // XXX the /node_modules in root will be ignored
                    if (segment != 'node_modules') dirs.push(parts.join('/') + '/' + segment + '/node_modules')
                }
                
                for (var i = 0; i < dirs.length; i++) {
                    
                    var resolved    = this.resolveAsDir(dirs[ i ])
                    
                    if (resolved) return resolved
                }
                
                return null
            },
            
            
            resolve : function (requireStr, baseDir) {
                if (this.coreModules[ requireStr ]) return this.getCoreModule(requireStr)
                
                baseDir     = baseDir || '.'
                baseDir     = baseDir.replace(/\/+$/, '')
                
                if (/^\//.test(requireStr))             return this.resolveAsFile(requireStr)
                if (/^(\.\/|\.\.\/)/.test(requireStr))  return this.resolveAsFile(baseDir + '/' + requireStr)
    
                return this.resolveAsModule(requireStr, baseDir)
            }
        }
    })
    
}


